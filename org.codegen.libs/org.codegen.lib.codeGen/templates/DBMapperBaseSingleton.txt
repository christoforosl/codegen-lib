'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT


'<comments>
'************************************************************
' Class autogenerated on 1/29/2011 10:56:05 AM by ModelGenerator
' Extends base DBMapperBase object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class <MODEL_CLASS_NAME>DBMapper
'
'************************************************************
'</comments>

Namespace <DBMAPPER_NAMESPACE>

    Public Class <MODEL_CLASS_NAME>DBMapper
        Inherits DBMapper
		
#Region "Constructors "
        Public Sub New(ByVal _dbConn As DBUtils)
            MyBase.new(_dbConn)
        End Sub
        
        
        Public Sub New()
            MyBase.new()
        End Sub
#End Region

#Region "Overloaded Functions"
		
		Public Shadows Sub save(ByVal mo As <MODEL_CLASS_NAME>)
            MyBase.save(mo)
        End Sub
        
        Public Shadows Function findByKey(ByVal keyval As Integer) As <MODEL_CLASS_NAME>

            Return DirectCast(MyBase.findByKey(keyval), <MODEL_CLASS_NAME>)

        End Function
        
#End Region

#Region "Shared ""get"" Functions "

		Public Shared Function findList(ByVal where As String, ByVal ParamArray params() As Object) _
					As List(Of <MODEL_CLASS_NAME>)

            dim dbm as <MODEL_CLASS_NAME>DBMapper = new <MODEL_CLASS_NAME>DBMapper()
            Return dbm.findList(where, params)

        End Function
		
		Public Shared Function findOne(ByVal where As String, ByVal ParamArray params() As Object) _
					As <MODEL_CLASS_NAME>

            Dim dbm As <MODEL_CLASS_NAME>DBMapper = New <MODEL_CLASS_NAME>DBMapper()
            Return DirectCast(dbm.findWhere(where, params), <MODEL_CLASS_NAME>)

        End Function
        
        
        		
		Public Shared Function findList() As List(Of <MODEL_CLASS_NAME>)
			
			return all<MODEL_CLASS_NAME>
			
        End Function
		
		Public Shared Function findByKey(id as Integer) as <MODEL_CLASS_NAME>
			
			Dim ret as <MODEL_CLASS_NAME> = Nothing
			
			for each tmp as <MODEL_CLASS_NAME> in all<MODEL_CLASS_NAME>
				if tmp.id = id Then
					ret = tmp
				End If
			next
			
            return ret
            
        End function
            
#Region """All"" collection management, available for objects marked as ""static"""

	    Private shared ReadOnly _isSingleton As Boolean = True
        Private Shared _all As List(Of <MODEL_CLASS_NAME>) = Nothing
        Private Shared _allLock As New Object

        protected Shared Sub ResetAll()

			if _isSingleton = false then return
			
            SyncLock (_allLock)
                'reset all collection
                _all = Nothing
            End SyncLock

        End Sub

		Public Shared Property all<MODEL_CLASS_NAME>() As List(Of <MODEL_CLASS_NAME>)
            
            Set(ByVal value As List(Of <MODEL_CLASS_NAME>))
                _all = value
            End Set
           
            Protected Get
				' Get is marked as Protected, and should be accessed by calling function getList
                SyncLock (_allLock)
                    If _all Is Nothing Then
                        Dim db As <MODEL_CLASS_NAME>DBMapper = New <MODEL_CLASS_NAME>DBMapper
                        _all = db.findAll
                        _all.Sort()
                    End If
                End SyncLock
                Return _all
            End Get
             
        End Property
	
#End Region


        
#End Region

#Region "Shared Save and Delete Functions"
		
		public shared sub save<MODEL_CLASS_NAME>(ByVal <MODEL_CLASS_NAME>Obj As <MODEL_CLASS_NAME>)
            
            dim dbm as <MODEL_CLASS_NAME>DBMapper = new <MODEL_CLASS_NAME>DBMapper()
            dbm.save(<MODEL_CLASS_NAME>Obj)

            Call ResetAll()
            
       end sub
        
       public shared sub delete<MODEL_CLASS_NAME>(ByVal <MODEL_CLASS_NAME>Obj As <MODEL_CLASS_NAME>)
            
            dim dbm as <MODEL_CLASS_NAME>DBMapper = new <MODEL_CLASS_NAME>DBMapper()
            dbm.delete(<MODEL_CLASS_NAME>Obj)
            
            Call ResetAll()

        end sub
#End Region

#Region "Data Table and data row load/save "        
        Public Shared Sub save<MODEL_CLASS_NAME>(ByVal dr As DataRow, _
                                                 Optional ByRef mo As <MODEL_CLASS_NAME> = Nothing)

            if mo is Nothing then 
				mo = <MODEL_CLASS_NAME>.Create()
			end if
			
            For Each dc As DataColumn In dr.Table.Columns
                mo.setAttribute(dc.ColumnName, dr.Item(dc.ColumnName))
            Next

            call save<MODEL_CLASS_NAME>(mo)

        End Sub
        
         
        Public Shared Sub save<MODEL_CLASS_NAME>(ByVal dt As DataTable, _
                                                 Optional ByRef mo As <MODEL_CLASS_NAME> = Nothing)

            For Each dr As DataRow In dt.Rows
            	call save<MODEL_CLASS_NAME>(dr,mo)
            Next
			
        End Sub
        
#End Region
        
#Region "getUpdateDBCommand"
        Public Overrides Function getUpdateDBCommand(ByVal modelObj As IModelObject, _
                                                     ByVal sql As String) As IDbCommand

                                                   
             Dim p As IDataParameter = Nothing
             Dim obj as <MODEL_CLASS_NAME> = DirectCast(modelObj,<MODEL_CLASS_NAME>)
             Dim stmt As IDbCommand = Me.dbConn.getCommand(sql)


<FILL_STATEMENT>

             return stmt

        End Function

#End Region

#Region "SQL Statements"
                
        Public Overrides Function getSQLStatement(ByVal skey As String) As String
			'because the <MODEL_CLASS_NAME>Sql.xml file is stored as an Embedded resource under
			'<MODEL_CLASS_NAME>DBMapper file (DependentUpon in the project file), 
			'its resource name is the same as the DBMapper file.
            Return SQLStmtsRegistry.getStatement(Me.GetType.FullName, skey, Me.dbConn.sqldialect)

        End Function


#End Region





#Region "Find functions"		
		
		'''	<summary>Given an sql statement, it opens a result set, and for each record returned, 
		'''	it creates and loads a ModelObject. </summary>
		'''	<param name="sWhereClause">where clause to be applied to "selectall" statement 
		''' that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
		'''	 <param name="params"> Parameter values to be passed to sql statement </param>
		'''	 <returns> A List(Of <MODEL_CLASS_NAME>) object containing all objects loaded </returns>
		'''	 
		Protected Friend Function findList(ByVal sWhereClause As String, _
											ByVal ParamArray params() As Object) _
											As List(Of <MODEL_CLASS_NAME>)

			dim sql as String = Me.getSqlWithWhereClause(sWhereClause)
			Dim rs As IDataReader = Nothing
			Dim molist As New List(Of <MODEL_CLASS_NAME>)
			
			
			Try

				rs = dbConn.getDataReaderWithParams(sql, params)
				me.Loader.DataSource = rs
				Do While rs.Read
					molist.Add ( DirectCast(me.Loader.load(),<MODEL_CLASS_NAME>))
					
				Loop


			Finally
				Me.dbConn.closeDataReader(rs)
			End Try

			Return molist

		End Function
    
		'''    
		'''	 <summary>Returns all records from database for a coresponding ModelObject </summary>
		''' <returns>List(Of <MODEL_CLASS_NAME>)</returns>
		Public Overridable Function findAll() As List(Of <MODEL_CLASS_NAME>)
			Return Me.findList(String.Empty)
		End Function
		
		
		
		Public Overrides Property Loader() As IModelObjectLoader
			Get
				if me._loader is Nothing then 
					me._loader = New <MODEL_CLASS_NAME>DataReaderLoader
				end If
				return me._loader
            End Get
            Set(value as IModelObjectLoader)
				me._loader = value
            end Set
        End Property

#End Region
		
    End Class

#Region " <MODEL_CLASS_NAME> Loader "
	
	Public Class <MODEL_CLASS_NAME>DataReaderLoader
		Inherits DataReaderLoader

			Public Overrides Function load() As IModelObject
            
<DATA_READER_CONSTANTS>
			
			'below we are instantiating a <MODEL_CLASS_NAME> object 
			'and then we cast it back to the model base, so that we call properties 
			'of the base class.  This will allow us 
            'to override and shadow properties in the derived class
            Dim obj As <MODEL_CLASS_NAME> = <MODEL_CLASS_NAME>.Create()
            
<LOADFROMRS_CODE>
            
            obj.isNew = false ' since we've just loaded from database, we mark as "old"
            obj.isDirty = False
			obj.afterLoad()

            return obj
            
        End Function
	
	End Class
	
	 Public Class <MODEL_CLASS_NAME>DataRowLoader
        Inherits DataRowLoader
        
        Public Sub New(ByVal dr As DataRow)
            MyBase.New(dr)
        End Sub

        Public Sub New()
			'empty constructor
        End Sub

		Public Overrides Function getInstanceforLoad() As IModelObject
            Return <MODEL_CLASS_NAME>.Create
        End Function


        Public Shared Function load<MODEL_CLASS_NAME>(ByVal dr As DataRow) as <MODEL_CLASS_NAME>

            dim ldr as <MODEL_CLASS_NAME>DataRowLoader = new <MODEL_CLASS_NAME>DataRowLoader(dr)
			return DirectCast(ldr.load(),<MODEL_CLASS_NAME>)
			
        End Function
        
        Public Shared Function load<MODEL_CLASS_NAME>List(ByVal drArr() As DataRow) _
				As List(Of <MODEL_CLASS_NAME>)

            Dim mol As List(Of <MODEL_CLASS_NAME>) = New List(Of <MODEL_CLASS_NAME>)
			dim ldr as <MODEL_CLASS_NAME>DataRowLoader = new <MODEL_CLASS_NAME>DataRowLoader()
			
            For i As Integer = 0 To drArr.Length - 1
				ldr.DataSource = drArr(i)
                Call mol.add(DirectCast(ldr.load(),<MODEL_CLASS_NAME>))
            Next

            Return mol

        End Function
        
        
        Public Shared Function load<MODEL_CLASS_NAME>List(ByVal dt As DataTable) _
					As List(Of <MODEL_CLASS_NAME>)

            Dim mol As List(Of <MODEL_CLASS_NAME>) = New List(Of <MODEL_CLASS_NAME>)
			dim ldr as <MODEL_CLASS_NAME>DataRowLoader = new <MODEL_CLASS_NAME>DataRowLoader()
			
            For Each dr As DataRow In dt.Rows
                If dr.RowState = DataRowState.Deleted Then
                Else
					ldr.DataSource = dr
					Call mol.add(DirectCast(ldr.load(),<MODEL_CLASS_NAME>))
                
                End if
            Next

            Return mol

        End Function
        
    End Class
    
#End Region
	
End Namespace

