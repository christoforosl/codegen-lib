'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT

'<comments>
'************************************************************
' Class autogenerated on <CURDATE> by <GENERATOR>
' Extends base DBMapperBase object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class <MODEL_CLASS_NAME>DBMapper
'
'************************************************************
'</comments>

Namespace <DBMAPPER_NAMESPACE>

    <CLASS_ACCESS_LEVEL> Class <MODEL_CLASS_NAME>DBMapper
        Inherits DBMapper
		
#Region "Constructors "
        Public Sub New(ByVal _dbConn As DBUtils)
            MyBase.new(_dbConn)
        End Sub
        
        
        Public Sub New()
            MyBase.new()
        End Sub
#End Region

#Region "Overloaded Functions"
		
		Public Shadows Function findWhere(ByVal sWhereClause As String, _
                                          ByVal ParamArray params() As Object)  As <MODEL_CLASS_NAME>
		
            return DirectCast(MyBase.findWhere(sWhereClause, params), <MODEL_CLASS_NAME>)
        End Function
        

		Public Sub save<MODEL_CLASS_NAME>(ByVal mo As <MODEL_CLASS_NAME>)
            MyBase.save(mo)
        End Sub
        
        Public Shadows Function findByKey(ByVal keyval As Integer) As <MODEL_CLASS_NAME>

            Return DirectCast(MyBase.findByKey(keyval), <MODEL_CLASS_NAME>)

        End Function
        
#End Region

      
#Region "getUpdateDBCommand"
        Public Overrides Function getUpdateDBCommand(ByVal modelObj As IModelObject, _
                                                     ByVal sql As String) As IDbCommand

                                                   
             Dim p As IDataParameter = Nothing
             Dim obj as I<MODEL_CLASS_NAME> = DirectCast(modelObj,I<MODEL_CLASS_NAME>)
             Dim stmt As IDbCommand = Me.dbConn.getCommand(sql)


<FILL_STATEMENT>

             return stmt

        End Function

#End Region

#Region "SQL Statements"
                
        Public Overrides Function getSQLStatement(ByVal skey As String) As String
			'because the <MODEL_CLASS_NAME>Sql.xml file is stored as an Embedded resource under
			'<MODEL_CLASS_NAME>DBMapper file (DependentUpon in the project file), 
			'its resource name is the same as the DBMapper file.
            Return SQLStmtsRegistry.getStatement(Me.GetType.FullName, skey, Me.dbConn.sqldialect)

        End Function


#End Region

<SAVE_CHILDREN_CODE>

<SAVE_PARENT_CODE>

#Region "Find functions"		
		
		'''	<summary>Given an sql statement, it opens a result set, and for each record returned, 
		'''	it creates and loads a ModelObject. </summary>
		'''	<param name="sWhereClause">where clause to be applied to "selectall" statement 
		''' that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
		'''	 <param name="params"> Parameter values to be passed to sql statement </param>
		'''	 <returns> A List(Of <MODEL_CLASS_NAME>) object containing all objects loaded </returns>
		'''	 
		Public Function findList(ByVal sWhereClause As String, _
											ByVal ParamArray params() As Object) _
											As List(Of <MODEL_CLASS_NAME>)

			dim sql as String = Me.getSqlWithWhereClause(sWhereClause)
			Dim rs As IDataReader = Nothing
			Dim molist As New List(Of <MODEL_CLASS_NAME>)
						
			Try				
				rs = dbConn.getDataReaderWithParams(sql, params)
                Me.Loader.DataSource = rs
               
				Do While rs.Read
					Dim mo As IModelObject = Me.getModelInstance
					Me.Loader.load(mo)
                    molist.Add(DirectCast(mo, <MODEL_CLASS_NAME>))
					
				Loop

				
			Finally
				Me.dbConn.closeDataReader(rs)
			End Try

			Return molist

		End Function
    
		'''    
		'''	 <summary>Returns all records from database for a coresponding ModelObject </summary>
		''' <returns>List(Of <MODEL_CLASS_NAME>) </returns>
		Public Function findAll() As List(Of <MODEL_CLASS_NAME>)
			Return Me.findList(String.Empty)
		End Function
		
		public Overrides Property Loader() As IModelObjectLoader
			Get
				if me._loader is Nothing then 
					me._loader = New <MODEL_CLASS_NAME>DataReaderLoader
				end If
				return me._loader
            End Get
            Set(value as IModelObjectLoader)
				me._loader = value
            end Set
        End Property

#End Region
		
		Public Overrides Function getModelInstance() As IModelObject
			return <MODEL_CLASS_NAME>Factory.Create()
        End Function
		
    End Class

#Region " <MODEL_CLASS_NAME> Loader "
	
	Public Class <MODEL_CLASS_NAME>DataReaderLoader
		Inherits DataReaderLoader

			Public Overrides sub load(ByVal mo As IModelObject)

<DATA_READER_CONSTANTS>
			
            Dim obj As <MODEL_CLASS_NAME> = directCast(mo, <MODEL_CLASS_NAME>)
            obj.IsObjectLoading = True

<LOADFROMRS_CODE>
            
            obj.isNew = false ' since we've just loaded from database, we mark as "old"
            obj.isDirty = False
			obj.IsObjectLoading = False
			obj.afterLoad()

            return
            
        End sub
	
	End Class

#End Region
		
	'''<summary>
    ''' Final Class with convinience shared methods for loading/saving the EmployeeRank ModelObject. 
    '''</summary>
	Public NotInheritable Class <MODEL_CLASS_NAME>DataUtils

#Region "Shared ""get"" Functions "

		Public Shared Function findList(ByVal where As String, ByVal ParamArray params() As Object) _
					As List(Of <MODEL_CLASS_NAME>)

            dim dbm as <MODEL_CLASS_NAME>DBMapper = new <MODEL_CLASS_NAME>DBMapper()
            Return dbm.findList(where, params)

        End Function
		
		Public Shared Function findOne(ByVal where As String, ByVal ParamArray params() As Object) _
					As <MODEL_CLASS_NAME>

            Dim dbm As <MODEL_CLASS_NAME>DBMapper = New <MODEL_CLASS_NAME>DBMapper()
            Return DirectCast(dbm.findWhere(where, params), <MODEL_CLASS_NAME>)

        End Function
        
        
         Public Shared Function findList() As List(Of <MODEL_CLASS_NAME>)
			
			Dim ret as List(Of <MODEL_CLASS_NAME>)
			Dim dbm as <MODEL_CLASS_NAME>DBMapper = new <MODEL_CLASS_NAME>DBMapper()
			ret = dbm.findAll()
			return ret
			
        End Function
        
        Public Shared Function findByKey(id as Integer) as <MODEL_CLASS_NAME>
			
			Dim ret as <MODEL_CLASS_NAME> = Nothing
			Dim dbm as <MODEL_CLASS_NAME>DBMapper = new <MODEL_CLASS_NAME>DBMapper()
			ret = DirectCast(dbm.findByKey(id),<MODEL_CLASS_NAME>)
            
            return ret
            
        end function
        
#End Region

#Region "Shared Save and Delete Functions"
		''' <summary>
        ''' Convinience method to save a <MODEL_CLASS_NAME> Object.
        ''' Important note: DO NOT CALL THIS IN A LOOP!
        ''' </summary>
        ''' <param name="<MODEL_CLASS_NAME>Obj"></param>
        ''' <remarks>
		''' Important note: DO NOT CALL THIS IN A LOOP!  
		''' This method simply instantiates a <MODEL_CLASS_NAME>DBMapper and calls the save method
		''' </remarks>
		public shared sub save<MODEL_CLASS_NAME>(ByVal ParamArray <MODEL_CLASS_NAME>Obj() As <MODEL_CLASS_NAME>)
            
            dim dbm as <MODEL_CLASS_NAME>DBMapper = new <MODEL_CLASS_NAME>DBMapper()
            dbm.saveList(<MODEL_CLASS_NAME>Obj.ToList)

                       
       end sub
       

       public shared sub delete<MODEL_CLASS_NAME>(ByVal <MODEL_CLASS_NAME>Obj As <MODEL_CLASS_NAME>)
            
            dim dbm as <MODEL_CLASS_NAME>DBMapper = new <MODEL_CLASS_NAME>DBMapper()
            dbm.delete(<MODEL_CLASS_NAME>Obj)
            
        end sub
#End Region

#Region "Data Table and data row load/save "        
        Public Shared Sub save<MODEL_CLASS_NAME>(ByVal dr As DataRow, _
                                                 Optional ByRef mo As <MODEL_CLASS_NAME> = Nothing)

            if mo is Nothing then 
				mo = <MODEL_CLASS_NAME>Factory.Create()
			end if
			
            For Each dc As DataColumn In dr.Table.Columns
                mo.setAttribute(dc.ColumnName, dr.Item(dc.ColumnName))
            Next

            call save<MODEL_CLASS_NAME>(mo)

        End Sub
        
         
        Public Shared Sub save<MODEL_CLASS_NAME>(ByVal dt As DataTable, _
                                                 Optional ByRef mo As <MODEL_CLASS_NAME> = Nothing)

            For Each dr As DataRow In dt.Rows
            	call save<MODEL_CLASS_NAME>(dr,mo)
            Next
			
        End Sub
        
		 Public Shared Function loadFromDataRow(ByVal r As DataRow) As <MODEL_CLASS_NAME>

            Dim a As New DataRowLoader
            Dim mo As IModelObject = <MODEL_CLASS_NAME>Factory.Create
            a.DataSource = r
            a.load(mo)
            Return DirectCast(mo, <MODEL_CLASS_NAME>)

        End Function

#End Region

    End Class
	
End Namespace
