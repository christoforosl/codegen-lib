		
		#Region "Association <association_name>"

		Public Overridable Function get<association_name_singular>(ByVal i As Integer) As <datatype> _
				implements <iface>.get<association_name_singular>

            me.load<association_name>
            If Me._<association_name>.Count >= (i - 1) Then
                Return Me._<association_name>.Item(i)
            End If
            Return Nothing

        End Function
        
		
		Public Overridable Sub Add<association_name_singular> _
				(val As <datatype>) _
				implements <iface>.Add<association_name_singular>
			'1-Many , add a single item!
			me.load<association_name>
			val.<child_field_runtime> = me.<parent_field_runtime>
			AddHandler Me.IDChanged, AddressOf val.handleParentIdChanged
			me._<association_name>.add(val)

        End Sub

		 Public Overridable Sub Clear<association_name>()

            Me.load<association_name>()
            Me._deleted<association_name>.AddRange(Me._<association_name>)
            Me._<association_name>.Clear()

        End Sub

		Public Overridable Sub Remove<association_name_singular>( _ 
					val As <datatype>) _
					implements <iface>.Remove<association_name_singular>
			
			me.load<association_name>
			me._deleted<association_name>.add(val)
			me._<association_name>.remove(val)

        End Sub

		
		Public Overridable Function getDeleted<association_name>() As IEnumerable(Of <datatype>) _
					implements <iface>.getDeleted<association_name>
			
			return me._deleted<association_name>

        End Function

        Public Overridable Property <association_name>() _ 
					As IEnumerable(Of <datatype>) _
					implements <implements>.<association_name>

            Get
				'1 to many relation
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._<association_name> Is Nothing Then
                    me.load<association_name>
                End If ' me._<association_name> is Nothing
				<sort>
                Return Me._<association_name>
            End Get
            
			Set(value as IEnumerable(Of <datatype>))
				if value is nothing then
					Me._<association_name> = nothing
                Else
                    Me._<association_name> = New List(Of <datatype>)
                    Me.addTo<association_name>List(value)
                End If
			End Set

        End Property

		''' <summary>
        ''' Private method to add to the <association_name> List. 
		''' The list must have aldready been initialized
        ''' </summary>
		Private Sub addTo<association_name>List(ByVal value As IEnumerable(Of <datatype>))

			Dim enumtor As IEnumerator(Of <datatype>) = value.GetEnumerator
        
		    While enumtor.MoveNext
                Dim v As <datatype> = enumtor.Current
                AddHandler Me.IDChanged, AddressOf v.handleParentIdChanged
                Me._<association_name>.Add(v)
            End While

        End Sub
        
        ''' <summary>
        ''' Loads child objects from dabatabase, if not loaded already
        ''' </summary>
        Public Overridable Sub load<association_name>
			
			if me.<association_name>Loaded then return
			'init list
			Me._<association_name> = New List(Of <datatype>)

			If Not Me.isNew Then
                
                Me.addTo<association_name>List( new <db_mapper>().findList( _ 
																		"<child_field>={0}", Me.<parent_field_runtime>))
            End If          
            
        End Sub
		#End Region