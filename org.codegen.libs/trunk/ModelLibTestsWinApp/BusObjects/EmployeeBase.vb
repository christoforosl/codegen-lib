
'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT
Imports System.Runtime.InteropServices
Imports System.Collections.Generic
Imports System.Xml.Serialization
'<comments>
'************************************************************
'
' Class autogenerated on 09/06/2013 8:02:57 AM by ModelGenerator
' Extends base model object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class Employee
'
'************************************************************
'</comments>
Namespace BusObjects

#Region "Interface"
<System.Runtime.InteropServices.ComVisible(False)> _
	Public Interface IEmployee: Inherits IModelObject
	Property EmployeeId as System.Int32
	Property EmployeeName as System.String
	Property EmployeeRankId as Nullable (of System.Int32)
	Property Salary as Nullable (of System.Decimal)
	Property Address as System.String
	Property Telephone as System.String
	Property Mobile as System.String
	Property IdNumber as System.String
	Property SSINumber as System.String
	Property HireDate as Nullable (of System.DateTime)
	Property NumDependents as Nullable (of System.Int32)
	Property Rank as BusObjects.EmployeeRank
	Property EmployeeInfo as BusObjects.EmployeeInfo
	Property EmployeeProjects as IEnumerable(Of BusObjects.EmployeeProject)
		Sub AddEmployeeProject(val as BusObjects.EmployeeProject)
		Sub RemoveEmployeeProject(val as BusObjects.EmployeeProject)
		Function getDeletedEmployeeProjects() as IEnumerable(Of BusObjects.EmployeeProject)
		Function getEmployeeProject(ByVal i As Integer) as BusObjects.EmployeeProject

End Interface
#End region 

	<DefaultMapperAttr(GetType(EmployeeDBMapper)), _
	 ComVisible(False),Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
	Public class EmployeeBase
		Inherits ModelObject
		Implements IEquatable(Of EmployeeBase),
		System.IComparable(Of Employee),IEmployee 

#Region "Constructor"
    
    public sub New()
		Me.addValidator(New EmployeeRequiredFieldsValidator)
    End Sub

#End Region

#Region "Children and Parents"
	
	Public Overrides Function getChildren() As List(Of ModelObject) 
		Dim ret as New List(Of ModelObject)()
			if  Me.EmployeeInfoLoaded then
		ret.Add(me.EmployeeInfo)
	End If
	if  Me.EmployeeProjectsLoaded Then ' check if loaded first!
		Dim lp As List(Of ModelObject) = Me._EmployeeProjects.ConvertAll( _
				New Converter(Of BusObjects.EmployeeProject, ModelObject)(
			Function(pf As BusObjects.EmployeeProject)
				Return DirectCast(pf, ModelObject)
			End Function))
		ret.AddRange(lp)
	End If

		return ret
	End Function
	
	Public Overrides Function getParents() As List(Of ModelObject)
		Dim ret as New List(Of ModelObject)()
		if  Me.RankLoaded then
ret.Add(me.Rank)
End If

		return ret
	End Function

#End Region
#Region "Field CONSTANTS"

			public Const STR_FLD_EMPLOYEEID as String = "EmployeeId"
			public Const STR_FLD_EMPLOYEENAME as String = "EmployeeName"
			public Const STR_FLD_EMPLOYEERANKID as String = "EmployeeRankId"
			public Const STR_FLD_SALARY as String = "Salary"
			public Const STR_FLD_ADDRESS as String = "Address"
			public Const STR_FLD_TELEPHONE as String = "Telephone"
			public Const STR_FLD_MOBILE as String = "Mobile"
			public Const STR_FLD_IDNUMBER as String = "IdNumber"
			public Const STR_FLD_SSINUMBER as String = "SSINumber"
			public Const STR_FLD_HIREDATE as String = "HireDate"
			public Const STR_FLD_NUMDEPENDENTS as String = "NumDependents"


		public Const FLD_EMPLOYEEID as Integer = 0
		public Const FLD_EMPLOYEENAME as Integer = 1
		public Const FLD_EMPLOYEERANKID as Integer = 2
		public Const FLD_SALARY as Integer = 3
		public Const FLD_ADDRESS as Integer = 4
		public Const FLD_TELEPHONE as Integer = 5
		public Const FLD_MOBILE as Integer = 6
		public Const FLD_IDNUMBER as Integer = 7
		public Const FLD_SSINUMBER as Integer = 8
		public Const FLD_HIREDATE as Integer = 9
		public Const FLD_NUMDEPENDENTS as Integer = 10



        '''<summary> Returns the names of fields in the object as a string array.
        ''' Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
        ''' <returns> string array </returns>	 
        Public Overrides Function getFieldList() As String()
            Return New String() {STR_FLD_EMPLOYEEID,STR_FLD_EMPLOYEENAME,STR_FLD_EMPLOYEERANKID,STR_FLD_SALARY,STR_FLD_ADDRESS,STR_FLD_TELEPHONE,STR_FLD_MOBILE,STR_FLD_IDNUMBER,STR_FLD_SSINUMBER,STR_FLD_HIREDATE,STR_FLD_NUMDEPENDENTS}
        End Function
        
#END Region

#Region "Field Declarations"


	Private _EmployeeId as System.Int32
	Private _EmployeeName as System.String = Nothing
	Private _EmployeeRankId as Nullable (of System.Int32) = Nothing
	Private _Salary as Nullable (of System.Decimal) = Nothing
	Private _Address as System.String = Nothing
	Private _Telephone as System.String = Nothing
	Private _Mobile as System.String = Nothing
	Private _IdNumber as System.String = Nothing
	Private _SSINumber as System.String = Nothing
	Private _HireDate as Nullable (of System.DateTime) = Nothing
	Private _NumDependents as Nullable (of System.Int32) = Nothing

	' *****************************************
	' ****** CHILD OBJECTS ********************
	private _Rank as BusObjects.EmployeeRank = nothing ''''' initialize to nothing, for lazy load logic below !!!
	private _EmployeeInfo as BusObjects.EmployeeInfo = nothing ''''' initialize to nothing, for lazy load logic below !!!
	private _EmployeeProjects as List(Of BusObjects.EmployeeProject) = nothing ''''' initialize to nothing, for lazy load logic below !!!
	private _deletedEmployeeProjects as List(Of BusObjects.EmployeeProject) = new List(Of BusObjects.EmployeeProject)''''' initialize to empty list !!!

	' *****************************************
	' ****** END CHILD OBJECTS ********************


#END Region

#Region "Field Properties"

	Public Overridable Property EmployeeId as System.Int32 _ 
		Implements IEmployee.EmployeeId
	Get 
		return _EmployeeId
	End Get 
	Set
		if ModelObject.valueChanged(_EmployeeId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEEID)
			End If
			me._EmployeeId = value

			me.raiseBroadcastIdChange()

		End if
	End Set 
	End Property 
Public Sub setEmployeeId(ByVal val As String)
	If IsNumeric(val) Then
		Me.EmployeeId = CInt(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.EmployeeId = Nothing
	Else
		Throw new ApplicationException("Invalid Integer Number, field:EmployeeId, value:" & val)
	End If
End Sub
	Public Overridable Property EmployeeName as System.String _ 
		Implements IEmployee.EmployeeName
	Get 
		return _EmployeeName
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("EmployeeName")
		End If
		if ModelObject.valueChanged(_EmployeeName, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEENAME)
			End If
			me._EmployeeName = value

		End if
	End Set 
	End Property 
Public Sub setEmployeeName(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.EmployeeName = val
	Else
		Me.EmployeeName = Nothing
	End If
End Sub
	Public Overridable Property EmployeeRankId as Nullable (of System.Int32) _ 
		Implements IEmployee.EmployeeRankId
	Get 
		return _EmployeeRankId
	End Get 
	Set(ByVal value As Nullable (of System.Int32))
		if ModelObject.valueChanged(_EmployeeRankId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEERANKID)
			End If
			me._EmployeeRankId = value

		End if
	End Set 
	End Property 
Public Sub setEmployeeRankId(ByVal val As String)
	If IsNumeric(val) Then
		Me.EmployeeRankId = CInt(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.EmployeeRankId = Nothing
	Else
		Throw new ApplicationException("Invalid Integer Number, field:EmployeeRankId, value:" & val)
	End If
End Sub
	Public Overridable Property Salary as Nullable (of System.Decimal) _ 
		Implements IEmployee.Salary
	Get 
		return _Salary
	End Get 
	Set(ByVal value As Nullable (of System.Decimal))
		if ModelObject.valueChanged(_Salary, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SALARY)
			End If
			me._Salary = value

		End if
	End Set 
	End Property 
Public Sub setSalary(ByVal val As String)
	If IsNumeric(val) Then
		Me.Salary = CDec(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.Salary = Nothing
	Else
		Throw new ApplicationException("Invalid Decimal Number, field:Salary, value:" & val)
	End If
End Sub
	Public Overridable Property Address as System.String _ 
		Implements IEmployee.Address
	Get 
		return _Address
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("Address")
		End If
		if ModelObject.valueChanged(_Address, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_ADDRESS)
			End If
			me._Address = value

		End if
	End Set 
	End Property 
Public Sub setAddress(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.Address = val
	Else
		Me.Address = Nothing
	End If
End Sub
	Public Overridable Property Telephone as System.String _ 
		Implements IEmployee.Telephone
	Get 
		return _Telephone
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("Telephone")
		End If
		if ModelObject.valueChanged(_Telephone, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_TELEPHONE)
			End If
			me._Telephone = value

		End if
	End Set 
	End Property 
Public Sub setTelephone(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.Telephone = val
	Else
		Me.Telephone = Nothing
	End If
End Sub
	Public Overridable Property Mobile as System.String _ 
		Implements IEmployee.Mobile
	Get 
		return _Mobile
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("Mobile")
		End If
		if ModelObject.valueChanged(_Mobile, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_MOBILE)
			End If
			me._Mobile = value

		End if
	End Set 
	End Property 
Public Sub setMobile(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.Mobile = val
	Else
		Me.Mobile = Nothing
	End If
End Sub
	Public Overridable Property IdNumber as System.String _ 
		Implements IEmployee.IdNumber
	Get 
		return _IdNumber
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("IdNumber")
		End If
		if ModelObject.valueChanged(_IdNumber, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_IDNUMBER)
			End If
			me._IdNumber = value

		End if
	End Set 
	End Property 
Public Sub setIdNumber(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.IdNumber = val
	Else
		Me.IdNumber = Nothing
	End If
End Sub
	Public Overridable Property SSINumber as System.String _ 
		Implements IEmployee.SSINumber
	Get 
		return _SSINumber
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("SSINumber")
		End If
		if ModelObject.valueChanged(_SSINumber, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SSINUMBER)
			End If
			me._SSINumber = value

		End if
	End Set 
	End Property 
Public Sub setSSINumber(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.SSINumber = val
	Else
		Me.SSINumber = Nothing
	End If
End Sub
	Public Overridable Property HireDate as Nullable (of System.DateTime) _ 
		Implements IEmployee.HireDate
	Get 
		return _HireDate
	End Get 
	Set(ByVal value As Nullable (of System.DateTime))
		if ModelObject.valueChanged(_HireDate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_HIREDATE)
			End If
			me._HireDate = value

		End if
	End Set 
	End Property 
Public Sub setHireDate(ByVal val As String)
	If IsDate(val) Then
		Me.HireDate = CDate(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.HireDate = Nothing
	Else
		Throw new ApplicationException("Invalid Date, field:HireDate, value:" & val)
	End If
End Sub
	Public Overridable Property NumDependents as Nullable (of System.Int32) _ 
		Implements IEmployee.NumDependents
	Get 
		return _NumDependents
	End Get 
	Set(ByVal value As Nullable (of System.Int32))
		if ModelObject.valueChanged(_NumDependents, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_NUMDEPENDENTS)
			End If
			me._NumDependents = value

		End if
	End Set 
	End Property 
Public Sub setNumDependents(ByVal val As String)
	If IsNumeric(val) Then
		Me.NumDependents = CInt(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.NumDependents = Nothing
	Else
		Throw new ApplicationException("Invalid Integer Number, field:NumDependents, value:" & val)
	End If
End Sub

		' ASSOCIATIONS GETTERS/SETTERS BELOW!
	Friend Function RankLoaded As Boolean
		'***Parent Association
		return  me._Rank is Nothing = False
	End Function 
		''' <summary>
        ''' Gets/Sets parent object
        ''' </summary>
		Public Overridable Property Rank() As BusObjects.EmployeeRank _
			implements IEmployee.Rank
		    '1-1 parent association
            Set(ByVal value As BusObjects.EmployeeRank)
                Me._Rank = value
				If value isnot Nothing then
					me.EmployeeRankId = value.RankId
					AddHandler value.IDChanged, AddressOf Me.handleParentIdChanged
                Else
					me.EmployeeRankId = Nothing
				End If

            End Set


            Get
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._Rank Is Nothing Then
					Me.loadRank
                End If 
				
                Return Me._Rank
            End Get
        End Property
        
        ''' <summary>
        ''' Loads parent object and sets the appropriate properties
        ''' </summary>
        Public Overridable Sub loadRank
			
			If me.RankLoaded then return
			
			If Me._Rank Is Nothing AndAlso _
                   Me.EmployeeRankId > 0 Then
                
				'call the setter here, not the private variable!
                Me.Rank = new BusObjects.Mappers.EmployeeRankDBMapper().FindByKey( _ 
				                 Me.EmployeeRankId.Value)
                
            End If ' me._Rank is Nothing

            If Me._Rank Is Nothing Then
                'call the setter here, not the private variable!
				Me.Rank = BusObjects.EmployeeRankFactory.Create()
                
            End If ' second check me._Rank is Nothing
			            
        End Sub

	Friend Function EmployeeInfoLoaded As Boolean
		'***Child Association
		return  me._EmployeeInfo is Nothing = False
	End Function 
        
        Public Overridable Property EmployeeInfo() As BusObjects.EmployeeInfo _
			implements IEmployee.EmployeeInfo
			'1-1 child association
            Set(ByVal value As BusObjects.EmployeeInfo)
                Me._EmployeeInfo = value
				If value isnot Nothing then
					Me._EmployeeInfo.EIEmployeeId = me.EmployeeId
					AddHandler Me.IDChanged, AddressOf value.handleParentIdChanged
				else
					Me._EmployeeInfo.EIEmployeeId = Nothing
				End If     
            End Set


            Get
			    'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._EmployeeInfo Is Nothing Then
					Call Me.loadEmployeeInfo
                End If 
								
                Return Me._EmployeeInfo
                
            End Get
        End Property
        
        ''' <summary>
        ''' Loads child object from dabatabase, if not loaded already
        ''' </summary>
        Public Overridable Sub loadEmployeeInfo
			
			If me.EmployeeInfoLoaded then return
			
			If  Me.EmployeeId > 0 Then
				'call setter here, not the private variable
				Me.EmployeeInfo = _ 
					new BusObjects.Mappers.EmployeeInfoDBMapper().findWhere( _ 
					   "EIEmployeeId={0}", Me.EmployeeId)
				
				
			End If ' me._EmployeeInfo is Nothing

            If Me._EmployeeInfo Is Nothing Then
                'call setter here, not the private variable
				Me.EmployeeInfo = BusObjects.EmployeeInfoFactory.Create()
                
            End If
            
        End Sub

		''' <summary>
        ''' resets the child object to force reload from database
        ''' </summary>
        Public Overridable Sub resetEmployeeInfo
			
			me.EmployeeInfo=nothing

		End Sub

	Friend Function EmployeeProjectsLoaded As Boolean
		'***Child Association
		return  me._EmployeeProjects is Nothing = False
	End Function 
		
		#Region "Association EmployeeProjects"

		Public Overridable Function getEmployeeProject(ByVal i As Integer) As BusObjects.EmployeeProject _
				implements IEmployee.getEmployeeProject

            me.loadEmployeeProjects
            If Me._EmployeeProjects.Count >= (i - 1) Then
                Return Me._EmployeeProjects.Item(i)
            End If
            Return Nothing

        End Function
        
		
		Public Overridable Sub AddEmployeeProject _
				(val As BusObjects.EmployeeProject) _
				implements IEmployee.AddEmployeeProject
			'1-Many , add a single item!
			me.loadEmployeeProjects
			val.EPEmployeeId = me.EmployeeId
			AddHandler Me.IDChanged, AddressOf val.handleParentIdChanged
			me._EmployeeProjects.add(val)

        End Sub

		 Public Overridable Sub ClearEmployeeProjects()

            Me.loadEmployeeProjects()
            Me._deletedEmployeeProjects.AddRange(Me._EmployeeProjects)
            Me._EmployeeProjects.Clear()

        End Sub

		Public Overridable Sub RemoveEmployeeProject( _ 
					val As BusObjects.EmployeeProject) _
					implements IEmployee.RemoveEmployeeProject
			
			me.loadEmployeeProjects
			me._deletedEmployeeProjects.add(val)
			me._EmployeeProjects.remove(val)

        End Sub

		
		Public Overridable Function getDeletedEmployeeProjects() As IEnumerable(Of BusObjects.EmployeeProject) _
					implements IEmployee.getDeletedEmployeeProjects
			
			return me._deletedEmployeeProjects

        End Function

        Public Overridable Property EmployeeProjects() _ 
					As IEnumerable(Of BusObjects.EmployeeProject) _
					implements IEmployee.EmployeeProjects

            Get
				'1 to many relation
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._EmployeeProjects Is Nothing Then
                    me.loadEmployeeProjects
                End If ' me._EmployeeProjects is Nothing
				
                Return Me._EmployeeProjects
            End Get
            
			Set(value as IEnumerable(Of BusObjects.EmployeeProject))
				if value is nothing then
					Me._EmployeeProjects = nothing
                Else
                    Me._EmployeeProjects = New List(Of BusObjects.EmployeeProject)
                    Me.addToEmployeeProjectsList(value)
                End If
			End Set

        End Property

		''' <summary>
        ''' Private method to add to the EmployeeProjects List. 
		''' The list must have aldready been initialized
        ''' </summary>
		Private Sub addToEmployeeProjectsList(ByVal value As IEnumerable(Of BusObjects.EmployeeProject))

			Dim enumtor As IEnumerator(Of BusObjects.EmployeeProject) = value.GetEnumerator
        
		    While enumtor.MoveNext
                Dim v As BusObjects.EmployeeProject = enumtor.Current
                AddHandler Me.IDChanged, AddressOf v.handleParentIdChanged
                Me._EmployeeProjects.Add(v)
            End While

        End Sub
        
        ''' <summary>
        ''' Loads child objects from dabatabase, if not loaded already
        ''' </summary>
        Public Overridable Sub loadEmployeeProjects
			
			if me.EmployeeProjectsLoaded then return
			'init list
			Me._EmployeeProjects = New List(Of BusObjects.EmployeeProject)

			If Not Me.isNew Then
                
                Me.addToEmployeeProjectsList( new BusObjects.Mappers.EmployeeProjectDBMapper().findList( _ 
																		"EPEmployeeId={0}", Me.Id))
            End If          
            
        End Sub
		#End Region


#End Region

#Region "Getters/Setters of values by field index/name"
    Public Overloads Overrides Function getAttribute(ByVal fieldKey As Integer) As Object
		

		select case fieldKey
		case FLD_EMPLOYEEID
			return me.EmployeeId
		case FLD_EMPLOYEENAME
			return me.EmployeeName
		case FLD_EMPLOYEERANKID
			return me.EmployeeRankId
		case FLD_SALARY
			return me.Salary
		case FLD_ADDRESS
			return me.Address
		case FLD_TELEPHONE
			return me.Telephone
		case FLD_MOBILE
			return me.Mobile
		case FLD_IDNUMBER
			return me.IdNumber
		case FLD_SSINUMBER
			return me.SSINumber
		case FLD_HIREDATE
			return me.HireDate
		case FLD_NUMDEPENDENTS
			return me.NumDependents
		case else
			return nothing
		end select


    End Function

    Public Overloads Overrides Function getAttribute(ByVal fieldKey As String) As Object
		fieldKey = fieldKey.ToLower

		if fieldKey=STR_FLD_EMPLOYEEID.ToLower() Then
			return me.EmployeeId
		else if fieldKey=STR_FLD_EMPLOYEENAME.ToLower() Then
			return me.EmployeeName
		else if fieldKey=STR_FLD_EMPLOYEERANKID.ToLower() Then
			return me.EmployeeRankId
		else if fieldKey=STR_FLD_SALARY.ToLower() Then
			return me.Salary
		else if fieldKey=STR_FLD_ADDRESS.ToLower() Then
			return me.Address
		else if fieldKey=STR_FLD_TELEPHONE.ToLower() Then
			return me.Telephone
		else if fieldKey=STR_FLD_MOBILE.ToLower() Then
			return me.Mobile
		else if fieldKey=STR_FLD_IDNUMBER.ToLower() Then
			return me.IdNumber
		else if fieldKey=STR_FLD_SSINUMBER.ToLower() Then
			return me.SSINumber
		else if fieldKey=STR_FLD_HIREDATE.ToLower() Then
			return me.HireDate
		else if fieldKey=STR_FLD_NUMDEPENDENTS.ToLower() Then
			return me.NumDependents
		else
			return nothing
		end If
    End Function

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As Integer, ByVal val As Object)
		
		Select Case fieldKey
		case FLD_EMPLOYEEID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.EmployeeId = Nothing
			Else
				Me.EmployeeId=CInt(val)
			End If
			return
		case FLD_EMPLOYEENAME
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.EmployeeName = Nothing
			Else
				Me.EmployeeName=Cstr(val)
			End If
			return
		case FLD_EMPLOYEERANKID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.EmployeeRankId = Nothing
			Else
				Me.EmployeeRankId=CInt(val)
			End If
			return
		case FLD_SALARY
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.Salary = Nothing
			Else
				Me.Salary=CDec(val)
			End If
			return
		case FLD_ADDRESS
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.Address = Nothing
			Else
				Me.Address=Cstr(val)
			End If
			return
		case FLD_TELEPHONE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.Telephone = Nothing
			Else
				Me.Telephone=Cstr(val)
			End If
			return
		case FLD_MOBILE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.Mobile = Nothing
			Else
				Me.Mobile=Cstr(val)
			End If
			return
		case FLD_IDNUMBER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.IdNumber = Nothing
			Else
				Me.IdNumber=Cstr(val)
			End If
			return
		case FLD_SSINUMBER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.SSINumber = Nothing
			Else
				Me.SSINumber=Cstr(val)
			End If
			return
		case FLD_HIREDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.HireDate = Nothing
			Else
				Me.HireDate=CDate(val)
			End If
			return
		case FLD_NUMDEPENDENTS
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.NumDependents = Nothing
			Else
				Me.NumDependents=CInt(val)
			End If
			return
		case else
			return
		end select


    End Sub

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As String, ByVal val As Object)
		
		fieldKey = fieldKey.ToLower
		
		if  fieldKey=STR_FLD_EMPLOYEEID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.EmployeeId = Nothing
			Else
				Me.EmployeeId=CInt(val)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEENAME.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.EmployeeName = Nothing
			Else
				Me.EmployeeName=Cstr(val)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEERANKID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.EmployeeRankId = Nothing
			Else
				Me.EmployeeRankId=CInt(val)
			End If
			return
		else if  fieldKey=STR_FLD_SALARY.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.Salary = Nothing
			Else
				Me.Salary=CDec(val)
			End If
			return
		else if  fieldKey=STR_FLD_ADDRESS.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.Address = Nothing
			Else
				Me.Address=Cstr(val)
			End If
			return
		else if  fieldKey=STR_FLD_TELEPHONE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.Telephone = Nothing
			Else
				Me.Telephone=Cstr(val)
			End If
			return
		else if  fieldKey=STR_FLD_MOBILE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.Mobile = Nothing
			Else
				Me.Mobile=Cstr(val)
			End If
			return
		else if  fieldKey=STR_FLD_IDNUMBER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.IdNumber = Nothing
			Else
				Me.IdNumber=Cstr(val)
			End If
			return
		else if  fieldKey=STR_FLD_SSINUMBER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.SSINumber = Nothing
			Else
				Me.SSINumber=Cstr(val)
			End If
			return
		else if  fieldKey=STR_FLD_HIREDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.HireDate = Nothing
			Else
				Me.HireDate=CDate(val)
			End If
			return
		else if  fieldKey=STR_FLD_NUMDEPENDENTS.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.NumDependents = Nothing
			Else
				Me.NumDependents=CInt(val)
			End If
			return
		end If

    End Sub

#End Region


#Region "Overrides of GetHashCode and Equals "
	
	Public Overloads Function Equals(ByVal other As EmployeeBase) As Boolean _     
		Implements System.IEquatable(Of EmployeeBase).Equals       
		
			'typesafe equals, checks for equality of fields
			If other Is Nothing Then Return False       
			If other Is Me Then Return True
		
			Return me.EmployeeId= other.EmployeeId _
				AndAlso me.EmployeeName= other.EmployeeName _
				AndAlso me.EmployeeRankId.GetValueOrDefault = other.EmployeeRankId.GetValueOrDefault _
				AndAlso me.Salary.GetValueOrDefault = other.Salary.GetValueOrDefault _
				AndAlso me.Address= other.Address _
				AndAlso me.Telephone= other.Telephone _
				AndAlso me.Mobile= other.Mobile _
				AndAlso me.IdNumber= other.IdNumber _
				AndAlso me.SSINumber= other.SSINumber _
				AndAlso me.HireDate.GetValueOrDefault = other.HireDate.GetValueOrDefault _
				AndAlso me.NumDependents.GetValueOrDefault = other.NumDependents.GetValueOrDefault
				
	End Function
	
	Public Overrides Function GetHashCode() As Integer
        'using Xor has the advantage of not overflowing the integer.
        Return me.EmployeeId.GetHashCode _
				Xor me.getStringHashCode(Me.EmployeeName) _
				Xor me.EmployeeRankId.GetHashCode _
				Xor me.Salary.GetHashCode _
				Xor me.getStringHashCode(Me.Address) _
				Xor me.getStringHashCode(Me.Telephone) _
				Xor me.getStringHashCode(Me.Mobile) _
				Xor me.getStringHashCode(Me.IdNumber) _
				Xor me.getStringHashCode(Me.SSINumber) _
				Xor me.HireDate.GetHashCode _
				Xor me.NumDependents.GetHashCode 
    
    End Function
    
    Public Overloads Overrides Function Equals(ByVal Obj As Object) As Boolean
		
		Dim temp = TryCast(obj, EmployeeBase)       
		If temp IsNot Nothing Then 
			Return Me.Equals(temp)
		Else
			Return False
		End If

    End Function
	
	Public Shared Operator =(ByVal obj1 As EmployeeBase, ByVal obj2 As EmployeeBase) As Boolean       
		Return Object.Equals(obj1 ,obj2)    
	End Operator    
	
	Public Shared Operator <>(ByVal obj1 As EmployeeBase, ByVal obj2 As EmployeeBase) As Boolean       
		Return Not (obj1 = obj2)    
	End Operator

#End Region

#Region "Copy and sort"

	Public Overrides Function copy() as IModelObject
		'creates a copy
		
		'NOTE: we can't cast from EmployeeBase to Employee, so below we 
        'instantiate a Employee, NOT a EmployeeBase object
        Dim ret as Employee = EmployeeFactory.Create()
            
				ret.EmployeeId = me.EmployeeId
		ret.EmployeeName = me.EmployeeName
		ret.EmployeeRankId = me.EmployeeRankId
		ret.Salary = me.Salary
		ret.Address = me.Address
		ret.Telephone = me.Telephone
		ret.Mobile = me.Mobile
		ret.IdNumber = me.IdNumber
		ret.SSINumber = me.SSINumber
		ret.HireDate = me.HireDate
		ret.NumDependents = me.NumDependents

		
		return ret
		
	End Function
	
	Public Overrides Sub merge(other as IModelObject)
		'merges this Employee model object (me) with the "other" instance 
		
		Dim o as Employee = CType(other, Employee)
            
		If not String.isNullOrEmpty(o.EmployeeName) AndAlso _
		 String.isNullOrEmpty(me.EmployeeName) Then 
		me.EmployeeName = o.EmployeeName
End If
If not o.EmployeeRankId is Nothing AndAlso _
		 me.EmployeeRankId is Nothing Then 
		me.EmployeeRankId = o.EmployeeRankId
End If
If not o.Salary is Nothing AndAlso _
		 me.Salary is Nothing Then 
		me.Salary = o.Salary
End If
If not String.isNullOrEmpty(o.Address) AndAlso _
		 String.isNullOrEmpty(me.Address) Then 
		me.Address = o.Address
End If
If not String.isNullOrEmpty(o.Telephone) AndAlso _
		 String.isNullOrEmpty(me.Telephone) Then 
		me.Telephone = o.Telephone
End If
If not String.isNullOrEmpty(o.Mobile) AndAlso _
		 String.isNullOrEmpty(me.Mobile) Then 
		me.Mobile = o.Mobile
End If
If not String.isNullOrEmpty(o.IdNumber) AndAlso _
		 String.isNullOrEmpty(me.IdNumber) Then 
		me.IdNumber = o.IdNumber
End If
If not String.isNullOrEmpty(o.SSINumber) AndAlso _
		 String.isNullOrEmpty(me.SSINumber) Then 
		me.SSINumber = o.SSINumber
End If
If not o.HireDate is Nothing AndAlso _
		 me.HireDate is Nothing Then 
		me.HireDate = o.HireDate
End If
If not o.NumDependents is Nothing AndAlso _
		 me.NumDependents is Nothing Then 
		me.NumDependents = o.NumDependents
End If

		
		
	End Sub

	Public Function CompareTo(ByVal other As Employee) As Integer _
		 Implements System.IComparable(Of Employee).CompareTo

		Return  Me.EmployeeName.CompareTo(other.EmployeeName)
	End Function

	
#End Region

#Region "parentIdChanged"
	'below sub is called when parentIdChanged
	public Overrides Sub handleParentIdChanged(parentMo as IModelObject)
		' Assocations from BusObjects.EmployeeRank
		if (typeof parentMo is BusObjects.EmployeeRank) Then
			me.EmployeeRankId= DirectCast(parentMo, BusObjects.EmployeeRank).RankId
		End If
	End Sub
#End Region


#Region "ID Property"
	
    Public Overrides Property Id() As Integer 
        Get
            return me._EmployeeId
        End Get
        Set(ByVal value As Integer)
             me._EmployeeId = value
             me.raiseBroadcastIdChange()
        End Set
    End Property
#End Region
	
#Region "Extra Code"
	
#End Region
	
	End Class

#Region "Req Fields validator"
	<System.Runtime.InteropServices.ComVisible(False)> _
    Public Class EmployeeRequiredFieldsValidator
        Implements IModelObjectValidator

        Public Sub validate(ByVal imo As org.model.lib.Model.IModelObject) _
                    Implements org.model.lib.IModelObjectValidator.validate

            Dim mo As Employee = CType(imo, Employee)
			if String.isNullOrEmpty( mo.EmployeeName) Then
		Throw new ModelObjectRequiredFieldException("EmployeeName")
End if 
if mo.EmployeeRankId is Nothing then
		Throw new ModelObjectRequiredFieldException("EmployeeRankId")
End if 

			
        End Sub

    End Class
#End Region

End Namespace

