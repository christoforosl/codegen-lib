
'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT

Imports System.Collections.Generic
Imports System.Xml.Serialization
'<comments>
'************************************************************
'
' Class autogenerated on 24/01/2013 6:02:43 PM by ModelGenerator
' Extends base model object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class Project
'
'************************************************************
'</comments>
Namespace BusObjects

#Region "Interface"
Public Interface IProject: Inherits IModelObject
	Property ProjectId as System.Int32
	Property ProjectName as System.String
	Property IsActive as Nullable (of System.Boolean)
	Property EmployeeProjects as IEnumerable(Of BusObjects.EmployeeProject)
		Sub AddEmployeeProject(val as BusObjects.EmployeeProject)
		Sub RemoveEmployeeProject(val as BusObjects.EmployeeProject)
		Function getDeletedEmployeeProjects() as IEnumerable(Of BusObjects.EmployeeProject)
		Function getEmployeeProject(ByVal i As Integer) as BusObjects.EmployeeProject

End Interface
#End region 


	<Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
	Public class ProjectBase
		Inherits ModelObject
		Implements IEquatable(Of ProjectBase),
		IProject 

#Region "Constructor"
    
    public sub New()
		Me.addValidator(New ProjectRequiredFieldsValidator)
    End Sub

#End Region

#Region "Children and Parents"
	
	Public Overrides Function getChildren() As List(Of ModelObject) 
		Dim ret as New List(Of ModelObject)()
			if  Me.EmployeeProjectsLoaded Then ' check if loaded first!
		Dim lp As List(Of ModelObject) = Me._EmployeeProjects.ConvertAll( _
				New Converter(Of BusObjects.EmployeeProject, ModelObject)(
			Function(pf As BusObjects.EmployeeProject)
				Return DirectCast(pf, ModelObject)
			End Function))
		ret.AddRange(lp)
	End If

		return ret
	End Function
	
	Public Overrides Function getParents() As List(Of ModelObject)
		Dim ret as New List(Of ModelObject)()
		
		return ret
	End Function

#End Region
#Region "Field CONSTANTS"

			public Const STR_FLD_PROJECTID as String = "ProjectId"
			public Const STR_FLD_PROJECTNAME as String = "ProjectName"
			public Const STR_FLD_ISACTIVE as String = "IsActive"


		public Const FLD_PROJECTID as Integer = 0
		public Const FLD_PROJECTNAME as Integer = 1
		public Const FLD_ISACTIVE as Integer = 2



        '''<summary> Returns the names of fields in the object as a string array.
        ''' Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
        ''' <returns> string array </returns>	 
        Public Overrides Function getFieldList() As String()
            Return New String() {STR_FLD_PROJECTID,STR_FLD_PROJECTNAME,STR_FLD_ISACTIVE}
        End Function
        
#END Region

#Region "Field Declarations"


	Private _ProjectId as System.Int32
	Private _ProjectName as System.String = Nothing
	Private _IsActive as Nullable (of System.Int32) = Nothing

	' *****************************************
	' ****** CHILD OBJECTS ********************
	private _EmployeeProjects as List(Of BusObjects.EmployeeProject) = nothing ''''' initialize to nothing, for lazy load logic below !!!
	private _deletedEmployeeProjects as List(Of BusObjects.EmployeeProject) = new List(Of BusObjects.EmployeeProject)''''' initialize to empty list !!!

	' *****************************************
	' ****** END CHILD OBJECTS ********************


#END Region

#Region "Field Properties"

	Public Overridable Property ProjectId as System.Int32 _ 
		Implements IProject.ProjectId
	Get 
		return _ProjectId
	End Get 
	Set
		if ModelObject.valueChanged(_ProjectId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_PROJECTID)
			End If
			me._ProjectId = value

			me.raiseBroadcastIdChange()

		End if
	End Set 
	End Property 
Public Sub setProjectId(ByVal val As String)
	If IsNumeric(val) Then
		Me.ProjectId = CInt(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.ProjectId = Nothing
	Else
		Throw new ApplicationException("Invalid Integer Number, field:ProjectId, value:" & val)
	End If
End Sub
	Public Overridable Property ProjectName as System.String _ 
		Implements IProject.ProjectName
	Get 
		return _ProjectName
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 250 Then
			Throw new ModelObjectFieldTooLongException("ProjectName")
		End If
		if ModelObject.valueChanged(_ProjectName, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_PROJECTNAME)
			End If
			me._ProjectName = value

		End if
	End Set 
	End Property 
Public Sub setProjectName(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.ProjectName = val
	Else
		Me.ProjectName = Nothing
	End If
End Sub
	Public Overridable Property IsActive as Nullable (of System.Boolean) _ 
		Implements IProject.IsActive
	Get 
		if _IsActive.hasValue then
			return  CBool( _IsActive) 
		Else
			return False
		End if 'end customized check
	End Get 
	Set(ByVal value As Nullable (of System.Boolean))
		if ModelObject.valueChanged(_IsActive, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_ISACTIVE)
			End If
			me._IsActive = CInt(IIf(value.HasValue AndAlso value.Value, 1, 0))

		End if
	End Set 
	End Property 
Public Sub setIsActive(ByVal val As String)
	If String.IsNullOrEmpty(val) Then
		Me.IsActive = Nothing
	Else
	    Dim newval As Boolean
	    Dim success As Boolean = Boolean.TryParse(val, newval)
	    If (Not success) Then
		    Throw new ApplicationException("Invalid Integer Number, field:IsActive, value:" & val)
	    End If
	    Me.IsActive = newval
	End If
End Sub

		' ASSOCIATIONS GETTERS/SETTERS BELOW!
	Friend Function EmployeeProjectsLoaded As Boolean
		'***Child Association
		return  me._EmployeeProjects is Nothing = False
	End Function 
		
		#Region "Association EmployeeProjects"

		Public Overridable Function getEmployeeProject(ByVal i As Integer) As BusObjects.EmployeeProject _
				implements IProject.getEmployeeProject

            me.loadEmployeeProjects
            If Me._EmployeeProjects.Count >= (i - 1) Then
                Return Me._EmployeeProjects.Item(i)
            End If
            Return Nothing

        End Function
        
		
		Public Overridable Sub AddEmployeeProject _
				(val As BusObjects.EmployeeProject) _
				implements IProject.AddEmployeeProject
			'1-Many , add a single item!
			me.loadEmployeeProjects
			val.EPProjectId = me.ProjectId
			AddHandler Me.IDChanged, AddressOf val.handleParentIdChanged
			me._EmployeeProjects.add(val)

        End Sub

		 Public Overridable Sub ClearEmployeeProjects()

            Me.loadEmployeeProjects()
            Me._deletedEmployeeProjects.AddRange(Me._EmployeeProjects)
            Me._EmployeeProjects.Clear()

        End Sub

		Public Overridable Sub RemoveEmployeeProject( _ 
					val As BusObjects.EmployeeProject) _
					implements IProject.RemoveEmployeeProject
			
			me.loadEmployeeProjects
			me._deletedEmployeeProjects.add(val)
			me._EmployeeProjects.remove(val)

        End Sub

		
		Public Overridable Function getDeletedEmployeeProjects() As IEnumerable(Of BusObjects.EmployeeProject) _
					implements IProject.getDeletedEmployeeProjects
			
			return me._deletedEmployeeProjects

        End Function

        Public Overridable Property EmployeeProjects() _ 
					As IEnumerable(Of BusObjects.EmployeeProject) _
					implements IProject.EmployeeProjects

            Get
				'1 to many relation
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._EmployeeProjects Is Nothing Then
                    me.loadEmployeeProjects
                End If ' me._EmployeeProjects is Nothing
				
                Return Me._EmployeeProjects
            End Get
            
			Set(value as IEnumerable(Of BusObjects.EmployeeProject))
				if value is nothing then
					Me._EmployeeProjects = nothing
                Else
                    Me._EmployeeProjects = New List(Of BusObjects.EmployeeProject)
                    Me.addToEmployeeProjectsList(value)
                End If
			End Set

        End Property

		''' <summary>
        ''' Private method to add to the EmployeeProjects List. 
		''' The list must have aldready been initialized
        ''' </summary>
		Private Sub addToEmployeeProjectsList(ByVal value As IEnumerable(Of BusObjects.EmployeeProject))

			Dim enumtor As IEnumerator(Of BusObjects.EmployeeProject) = value.GetEnumerator
        
		    While enumtor.MoveNext
                Dim v As BusObjects.EmployeeProject = enumtor.Current
                AddHandler Me.IDChanged, AddressOf v.handleParentIdChanged
                Me._EmployeeProjects.Add(v)
            End While

        End Sub
        
        ''' <summary>
        ''' Loads child objects from dabatabase, if not loaded already
        ''' </summary>
        Public Overridable Sub loadEmployeeProjects
			
			if me.EmployeeProjectsLoaded then return
			'init list
			Me._EmployeeProjects = New List(Of BusObjects.EmployeeProject)

			If Not Me.isNew Then
                
                Me.addToEmployeeProjectsList( new BusObjects.Mappers.EmployeeProjectDBMapper().findList( _ 
																		"EPProjectId={0}", Me.Id))
            End If          
            
        End Sub
		#End Region


#End Region

#Region "Getters/Setters of values by field index/name"
    Public Overloads Overrides Function getAttribute(ByVal fieldKey As Integer) As Object
		

		select case fieldKey
		case FLD_PROJECTID
			return me.ProjectId
		case FLD_PROJECTNAME
			return me.ProjectName
		case FLD_ISACTIVE
			return me.IsActive
		case else
			return nothing
		end select


    End Function

    Public Overloads Overrides Function getAttribute(ByVal fieldKey As String) As Object
		fieldKey = fieldKey.ToLower

		if fieldKey=STR_FLD_PROJECTID.ToLower() Then
			return me.ProjectId
		else if fieldKey=STR_FLD_PROJECTNAME.ToLower() Then
			return me.ProjectName
		else if fieldKey=STR_FLD_ISACTIVE.ToLower() Then
			return me.IsActive
		else
			return nothing
		end If
    End Function

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As Integer, ByVal val As Object)
		
		Select Case fieldKey
		case FLD_PROJECTID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.ProjectId = Nothing
			Else
				Me.ProjectId=CInt(val)
			End If
			return
		case FLD_PROJECTNAME
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.ProjectName = Nothing
			Else
				Me.ProjectName=Cstr(val)
			End If
			return
		case FLD_ISACTIVE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.IsActive = Nothing
			Else
				Me.IsActive=CBool(val)
			End If
			return
		case else
			return
		end select


    End Sub

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As String, ByVal val As Object)
		
		fieldKey = fieldKey.ToLower
		
		if  fieldKey=STR_FLD_PROJECTID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.ProjectId = Nothing
			Else
				Me.ProjectId=CInt(val)
			End If
			return
		else if  fieldKey=STR_FLD_PROJECTNAME.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.ProjectName = Nothing
			Else
				Me.ProjectName=Cstr(val)
			End If
			return
		else if  fieldKey=STR_FLD_ISACTIVE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.IsActive = Nothing
			Else
				Me.IsActive=CBool(val)
			End If
			return
		end If

    End Sub

#End Region


#Region "Overrides of GetHashCode and Equals "
	
	Public Overloads Function Equals(ByVal other As ProjectBase) As Boolean _     
		Implements System.IEquatable(Of ProjectBase).Equals       
		
			'typesafe equals, checks for equality of fields
			If other Is Nothing Then Return False       
			If other Is Me Then Return True
		
			Return me.ProjectId= other.ProjectId _
				AndAlso me.ProjectName= other.ProjectName _
				AndAlso me.IsActive.GetValueOrDefault = other.IsActive.GetValueOrDefault
				
	End Function
	
	Public Overrides Function GetHashCode() As Integer
        'using Xor has the advantage of not overflowing the integer.
        Return me.ProjectId.GetHashCode _
				Xor me.getStringHashCode(Me.ProjectName) _
				Xor me.IsActive.GetHashCode 
    
    End Function
    
    Public Overloads Overrides Function Equals(ByVal Obj As Object) As Boolean
		
		Dim temp = TryCast(obj, ProjectBase)       
		If temp IsNot Nothing Then 
			Return Me.Equals(temp)
		Else
			Return False
		End If

    End Function
	
	Public Shared Operator =(ByVal obj1 As ProjectBase, ByVal obj2 As ProjectBase) As Boolean       
		Return Object.Equals(obj1 ,obj2)    
	End Operator    
	
	Public Shared Operator <>(ByVal obj1 As ProjectBase, ByVal obj2 As ProjectBase) As Boolean       
		Return Not (obj1 = obj2)    
	End Operator

#End Region

#Region "Copy and sort"

	Public Overrides Function copy() as IModelObject
		'creates a copy
		
		'NOTE: we can't cast from HolidayBase to Holiday, so below we 
        'instantiate a Holiday, NOT a HolidayBase object
        Dim ret as Project = ProjectFactory.Create()
            
				ret.ProjectId = me.ProjectId
		ret.ProjectName = me.ProjectName
		ret.IsActive = me.IsActive

		
		return ret
		
	End Function
	
	
	
#End Region



#Region "ID Property"
	
    Public Overrides Property Id() As Integer 
        Get
            return me._ProjectId
        End Get
        Set(ByVal value As Integer)
             me._ProjectId = value
             me.raiseBroadcastIdChange()
        End Set
    End Property
#End Region
	
#Region "Extra Code"
	
#End Region
	
	End Class

#Region "Req Fields validator"
    Public Class ProjectRequiredFieldsValidator
        Implements IModelObjectValidator

        Public Sub validate(ByVal imo As org.model.lib.Model.IModelObject) _
                    Implements org.model.lib.IModelObjectValidator.validate

            Dim mo As Project = CType(imo, Project)
			if String.isNullOrEmpty( mo.ProjectName) Then
		Throw new ModelObjectRequiredFieldException("ProjectName")
End if 
if mo.IsActive is Nothing then
		Throw new ModelObjectRequiredFieldException("IsActive")
End if 

			
        End Sub

    End Class
#End Region

End Namespace

