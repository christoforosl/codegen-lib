
Imports System.Text
Imports System.Collections.Generic
Imports Microsoft.VisualStudio.TestTools.UnitTesting

'<comments>
'************************************************************
' Class autogenerated on 12-08-2011 10:04:19 AM by ModelGenerator
' DO NOT MODIFY CODE IN THIS CLASS!!
'************************************************************
'</comments>
<TestClass()> Public Class ProjectTestBase

    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = Value
        End Set
    End Property


#Region "Additional test attributes"
    '
    ' You can use the following additional attributes as you write your tests:
    '
    ' Use ClassInitialize to run code before running the first test in the class
    <ClassInitialize()> Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
        ModelContext.newForUnitTests()
    End Sub
    '
    ' Use ClassCleanup to run code after all tests in a class have run
    <ClassCleanup()> Public Shared Sub MyClassCleanup()
        ModelContext.release()
    End Sub


    'Use TestInitialize to run code before running each test
    '<TestInitialize()> _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    ' Use TestCleanup to run code after each test has run
    <TestCleanup()> Public Sub MyTestCleanup()
    End Sub
    '
#End Region


    <TestMethod()> Public Sub TestLoadAndSaveProject()

        Dim pid As Integer = ModelContext.Current.DbUtils.getIntValue("select top 1 ProjectId from Project")
        If pid = 0 Then
            Assert.Inconclusive("No Project in database, table is empty")
        Else

            Dim pdb As New ProjectDBMapper()
            Dim p As Project = pdb.findByKey(pid)
			Dim p2 As Project = directCast(p.copy(),Project)

			'Test equality and hash codes
			Assert.AreEqual(p.GetHashCode(), p2.GetHashCode())
            Assert.AreEqual(p, p2)
			
			
            p.isDirty = True 'force save
            pdb.save(p)
			
			'now reload object from database
			p = Nothing
            p = pdb.findByKey(pid)
            
            'test fields to be equal before and after save
			Assert.IsTrue(p.ProjectId = p2.ProjectId,"Expected Field ProjectId to be equal")
		Assert.IsTrue(p.ProjectName = p2.ProjectName,"Expected Field ProjectName to be equal")
		Assert.IsTrue(p.IsActive.GetValueOrDefault = p2.IsActive.GetValueOrDefault,"Expected Field IsActive to be equal")

            
	'*** Test loading of child/parents **
	Assert.isTrue(p.EmployeeProjects isNot Nothing)

            
        End If
    End Sub

End Class

